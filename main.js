(()=>{"use strict";var n={756:(n,t,e)=>{e.d(t,{Z:()=>A});var o=e(15),r=e.n(o),a=e(645),i=e.n(a)()(r());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Neucha&display=swap);"]),i.push([n.id,"html,\nbody {\n    margin: 0;\n    height: 100%;\n    font-family: 'Neucha', cursive;\n}\n\n#main {\n    display: flex;\n    margin: 0;\n    height: 100%;\n    width: 100%;\n}\n\nnav {\n    margin: .1px 5em 0 0;\n    height: 100%;\n    width: 100%;\n}\n\nnav h3 {\n    cursor: pointer;\n}\n\n#content {\n    width: 100%;\n}\n\n.task {\n    display: flex;\n    justify-content: left;\n    margin: 1em;\n    width: 5em;\n    object-fit: contain;\n    width: 100%;\n    font-size: 1.5em;\n}\n\n.taskName {\n    margin-right: 15px;\n    width: 100%;\n}\n\n.closeImg {\n    width: 1em;\n    margin: 1em;\n}\n\nheader {\n    display: flex;\n    justify-content: center;\n    border-bottom: 1px solid black;\n    font-size: 1.6em;\n    background-color: #334257;\n    color: white;\n}\n\nnav {\n    flex-direction: column;\n    border-right: 1px solid black;\n    width: 20%;\n    background-color: #EEEEEE;\n}\n\n#projects {\n    border-bottom: 1px solid black;\n    width: 100%;\n}\n\n.project-item {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    overflow: scroll;\n    font-size: 1.3em;\n}\n\n#projectForm {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    margin-top: 1em;\n}\n\n#main {\n    margin: 0;\n    width: 100%;\n    background-color: #EEEEEE;\n}\n\n#taskForm {\n    /* display: flex; */\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    border: 1px solid black;\n    border-radius: 1em;\n    padding: 3em;\n}\n\n#taskForm section {\n    margin-bottom: 1em;\n    font-size: 1.5em;\n}\n\n#taskForm input[type='text'],\n#taskForm input[type='date'] {\n    width: 100%;\n    height: 2em;\n}\n\n#taskForm button {\n    width: 50%;\n    height: 2em;\n    font-size: 1.1em;\n}\n\n\n/* Using JS */\n\n.toggleDisplay {\n    display: none;\n}\n\n#taskDiv {\n    width: 100%;\n}\n\n.taskDate {\n    width: 100%;\n}\n\nfooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1em;\n    border: 1px solid black;\n    object-fit: contain;\n    width: 100%;\n    background-color: #334257;\n    color: white;\n}\n\nfooter a {\n    width: 3em;\n    height: 100%;\n}\n\n#githubIcon {\n    width: 100%;\n    height: 2em;\n    border-radius: 100%;\n}\n\nbutton {\n    font-family: 'Neucha', cursive;\n}\n\ninput {\n    font-family: 'Neucha', cursive;\n}\n\n#addTask {\n    font-size: 2em;\n    background-color: #476072;\n}\n\n#projectForm button {\n    font-size: 1.2em;\n}\n\n#projectForm input {\n    font-size: 1em;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AACA;;IAEI,SAAS;IACT,YAAY;IACZ,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,SAAS;IACT,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,oBAAoB;IACpB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,WAAW;IACX,UAAU;IACV,mBAAmB;IACnB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,UAAU;IACV,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,8BAA8B;IAC9B,gBAAgB;IAChB,yBAAyB;IACzB,YAAY;AAChB;;AAEA;IACI,sBAAsB;IACtB,6BAA6B;IAC7B,UAAU;IACV,yBAAyB;AAC7B;;AAEA;IACI,8BAA8B;IAC9B,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,WAAW;IACX,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;IACtB,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,gCAAgC;IAChC,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;;IAEI,WAAW;IACX,WAAW;AACf;;AAEA;IACI,UAAU;IACV,WAAW;IACX,gBAAgB;AACpB;;;AAGA,aAAa;;AAEb;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;IACd,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;IACX,yBAAyB;IACzB,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,mBAAmB;AACvB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,cAAc;AAClB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Neucha&display=swap');\nhtml,\nbody {\n    margin: 0;\n    height: 100%;\n    font-family: 'Neucha', cursive;\n}\n\n#main {\n    display: flex;\n    margin: 0;\n    height: 100%;\n    width: 100%;\n}\n\nnav {\n    margin: .1px 5em 0 0;\n    height: 100%;\n    width: 100%;\n}\n\nnav h3 {\n    cursor: pointer;\n}\n\n#content {\n    width: 100%;\n}\n\n.task {\n    display: flex;\n    justify-content: left;\n    margin: 1em;\n    width: 5em;\n    object-fit: contain;\n    width: 100%;\n    font-size: 1.5em;\n}\n\n.taskName {\n    margin-right: 15px;\n    width: 100%;\n}\n\n.closeImg {\n    width: 1em;\n    margin: 1em;\n}\n\nheader {\n    display: flex;\n    justify-content: center;\n    border-bottom: 1px solid black;\n    font-size: 1.6em;\n    background-color: #334257;\n    color: white;\n}\n\nnav {\n    flex-direction: column;\n    border-right: 1px solid black;\n    width: 20%;\n    background-color: #EEEEEE;\n}\n\n#projects {\n    border-bottom: 1px solid black;\n    width: 100%;\n}\n\n.project-item {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    overflow: scroll;\n    font-size: 1.3em;\n}\n\n#projectForm {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    margin-top: 1em;\n}\n\n#main {\n    margin: 0;\n    width: 100%;\n    background-color: #EEEEEE;\n}\n\n#taskForm {\n    /* display: flex; */\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    border: 1px solid black;\n    border-radius: 1em;\n    padding: 3em;\n}\n\n#taskForm section {\n    margin-bottom: 1em;\n    font-size: 1.5em;\n}\n\n#taskForm input[type='text'],\n#taskForm input[type='date'] {\n    width: 100%;\n    height: 2em;\n}\n\n#taskForm button {\n    width: 50%;\n    height: 2em;\n    font-size: 1.1em;\n}\n\n\n/* Using JS */\n\n.toggleDisplay {\n    display: none;\n}\n\n#taskDiv {\n    width: 100%;\n}\n\n.taskDate {\n    width: 100%;\n}\n\nfooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1em;\n    border: 1px solid black;\n    object-fit: contain;\n    width: 100%;\n    background-color: #334257;\n    color: white;\n}\n\nfooter a {\n    width: 3em;\n    height: 100%;\n}\n\n#githubIcon {\n    width: 100%;\n    height: 2em;\n    border-radius: 100%;\n}\n\nbutton {\n    font-family: 'Neucha', cursive;\n}\n\ninput {\n    font-family: 'Neucha', cursive;\n}\n\n#addTask {\n    font-size: 2em;\n    background-color: #476072;\n}\n\n#projectForm button {\n    font-size: 1.2em;\n}\n\n#projectForm input {\n    font-size: 1em;\n}"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);o&&r[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),t.push(c))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=new Array(t);e<t;e++)o[e]=n[e];return o}n.exports=function(n){var e,o,r=(o=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var o,r,a=[],i=!0,A=!1;try{for(e=e.call(n);!(i=(o=e.next()).done)&&(a.push(o.value),!t||a.length!==t);i=!0);}catch(n){A=!0,r=n}finally{try{i||null==e.return||e.return()}finally{if(A)throw r}}return a}}(e,o)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);return"Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o?Array.from(n):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(n,e):void 0}}(e,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if(!i)return a;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),s="/*# ".concat(c," */"),u=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(u).concat([s]).join("\n")}return[a].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var a={},i=[],A=0;A<n.length;A++){var c=n[A],s=o.base?c[0]+o.base:c[0],u=a[s]||0,l="".concat(s," ").concat(u);a[s]=u+1;var d=e(l),m={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(t[d].references++,t[d].updater(m)):t.push({identifier:l,updater:r(m,o),references:1}),i.push(l)}return i}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=e(a[i]);t[A].references--}for(var c=o(n,r),s=0;s<a.length;s++){var u=e(a[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=c}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o=e.css,r=e.media,a=e.sourceMap;r?n.setAttribute("media",r):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return n[o](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{class n{constructor(n,t="No Date",e){this.name=n,this.dueDate=t,this.index=e.countInterval()}getIndex(){return this.index}getName(){return this.name}getDueDate(){return this.dueDate}}class t{constructor(n){this.name=n,this.taskArray=[],this.count=-1}getName(){return this.name}getTaskArray(){return this.taskArray}appendTask(n){this.taskArray.push(n)}countInterval(){return this.count++,this.count}removeTask(n){return this.taskArray=this.taskArray.filter(((t,e)=>e!=n)),this.count=0,this.taskArray}}document.querySelector("#addTask").addEventListener("click",(n=>{document.querySelector("#taskForm").classList.toggle("toggleDisplay")})),document.querySelector("#submitButton").addEventListener("click",(n=>{s(document.querySelector("#taskForm"));const t=c();d(u(),t.taskName,t.taskDate),I()})),document.querySelector("#addProject").addEventListener("click",(n=>{m(A()),document.querySelector("#projectName").value=""}));let o,r=[];window.localStorage.getItem("projectStorage")&&(r=JSON.parse(window.localStorage.getItem("projectStorage")));const a=function(n){r=y();const t=document.querySelector("#projects");let e=document.createElement("div");e.classList.add("project-item");let o=document.createElement("h3");e.appendChild(o),o.classList.add("projectName"),o.textContent=n.getName(),function(n,t){const e=document.querySelector("#content");n.addEventListener("click",(n=>{e.innerHTML="",l(t),t.getTaskArray().forEach((n=>i(n)))})),n.addEventListener("click",(n=>{document.querySelector("#addTask").classList.remove("toggleDisplay")}),{once:!0})}(e,n),t.appendChild(e);const a=new Image;a.src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2Fa%2Fa9%2FBlack_x.svg%2F896px-Black_x.svg.png&f=1&nofb=1",a.classList.add("closeImg"),a.addEventListener("click",(n=>{const t=n.target.parentNode.getAttribute("data-index");B(t),p(),g()})),e.prepend(a),C()},i=function(n){console.log(n);const t=document.querySelector("#content"),e=document.createElement("div");e.classList.add("task"),e.setAttribute("data-index",n.getIndex()),e.innerHTML=`\n        <p class="taskName">${n.getName()}</p>\n        <p class="taskDate">${n.getDueDate()}</p>\n    `;const o=new Image;o.src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2Fa%2Fa9%2FBlack_x.svg%2F896px-Black_x.svg.png&f=1&nofb=1",o.classList.add("closeImg"),o.addEventListener("click",(n=>{const t=n.target.parentNode.getAttribute("data-index");u().removeTask(t),f(),h()})),e.prepend(o),t.appendChild(e)},A=function(){return document.querySelector("#projectName").value},c=function(){document.querySelector("#taskForm");const n=document.querySelector("#taskName").value;document.querySelector("#taskName").value="";const t=document.querySelector("#taskDate").value;return document.querySelector("#taskDate").value="",document.querySelector("#submitButton"),{taskName:n,taskDate:t}},s=function(n){n.classList.toggle("toggleDisplay")},u=function(){return o},l=function(n){o=n},d=function(t,e,o){const a=new n(e,o,t);t.appendTask(a),i(a),window.localStorage.setItem("projectStorage",JSON.stringify(r))},m=function(n){const e=new t(n);r.push(e),window.localStorage.setItem("projectStorage",JSON.stringify(r)),a(e),console.log(window.localStorage.getItem("projectStorage"))},f=function(){document.querySelector("#content").innerHTML=""},p=function(){document.querySelector("#projects").innerHTML=""},h=function(){u().getTaskArray().forEach((n=>i(n)))},g=function(){r.forEach((n=>a(n)))},I=function(){const n=document.querySelector("#taskName"),t=document.querySelector("#taskDate");n.value="",t.value=""},C=function(){const n=document.querySelector("#projects").childNodes;let t=0;n.forEach((n=>{"DIV"==n.tagName&&(n.setAttribute("data-index",t),t++)}))},B=function(n){return r=r.filter(((t,e)=>e!=n)),window.localStorage.setItem("projectStorage",JSON.stringify(r)),r},y=function(){const n=[];return r.forEach((e=>{const o=new t(e.name);e.taskArray.forEach((n=>{o.appendTask(n)})),n.push(o)})),n};var k=e(379),b=e.n(k),v=e(795),w=e.n(v),E=e(569),x=e.n(E),S=e(565),j=e.n(S),F=e(216),N=e.n(F),W=e(589),T=e.n(W),q=e(756),L={};L.styleTagTransform=T(),L.setAttributes=j(),L.insert=x().bind(null,"head"),L.domAPI=w(),L.insertStyleElement=N(),b()(q.Z,L),q.Z&&q.Z.locals&&q.Z.locals;const D=JSON.parse(window.localStorage.getItem("projectStorage"));window.localStorage.getItem("projectStorage")&&(console.log(D),D.forEach((n=>{const e=new t(n.name);n.taskArray.forEach((n=>{e.appendTask(n)})),a(e)})));const z=new t("CLICK ME");z.appendTask(new n("Add a task by clickling button on right","Now",z)),a(z)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,